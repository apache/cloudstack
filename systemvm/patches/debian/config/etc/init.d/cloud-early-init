#!/bin/bash
### BEGIN INIT INFO
# Provides:          cloud-early-init
# Required-Start:    mountkernfs $local_fs
# Required-Stop:     $local_fs
# Should-Start:
# Should-Stop:
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: configure according to cmdline
### END INIT INFO
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"

# include req for patchsystemvm
. /lib/lsb/init-functions

log_it() {
  echo "$(date) cloud-early-init $@" >> /var/log/cloud.log
  log_action_msg "$@"
}

hypervisor() {
  [ -d /proc/xen ] && mount -t xenfs none /proc/xen
  [ -d /proc/xen ] && echo "xen-domU" && return 0

  local try=$([ -x /usr/sbin/virt-what ] && virt-what | tail -1)
  [ "$try" != "" ] && echo $try && return 0

  vmware-checkvm &> /dev/null && echo "vmware" && return 0

  grep -q QEMU /proc/cpuinfo  && echo "kvm" && return 0
  grep -q QEMU /var/log/messages && echo "kvm" && return 0

  echo "unknown" && return 1

}

get_boot_params() {
  local EXTRA_MOUNT=/media/extra
  local hyp=$(hypervisor)
  [ $? -ne 0 ] && log_it "Failed to detect hypervisor type, bailing out of early init" && exit 10

  case $hyp in
     xen-domU|xen-hvm)
          cat /proc/cmdline > /var/cache/cloud/cmdline
          sed -i "s/%/ /g" /var/cache/cloud/cmdline
          ;;
     kvm)
          VPORT=$(find /dev/virtio-ports -type l -name '*.vport' 2>/dev/null|head -1)

          if [ -z "$VPORT" ]; then
            log_it "No suitable VirtIO port was found in /dev/virtio-ports" && exit 2
          fi

          if [ ! -e "$VPORT" ]; then
            log_it "${VPORT} not loaded, perhaps guest kernel is too old." && exit 2
          fi

	      local factor=2
	      local progress=1
		  for i in {1..5}
		  do
	        while read line; do
	          if [[ $line == cmdline:* ]]; then
	            cmd=${line//cmdline:/}
                echo $cmd > /var/cache/cloud/cmdline
	          elif [[ $line == pubkey:* ]]; then
	            pubkey=${line//pubkey:/}
	            echo $pubkey > /var/cache/cloud/authorized_keys
	            echo $pubkey > /root/.ssh/authorized_keys
              fi
	        done < $VPORT
	        # In case of reboot we do not send the boot args again.
	        # So, no need to wait for them, as the boot args are already set at startup
	        if [ -s /var/cache/cloud/cmdline  ]
	        then
              log_it "Found a non empty cmdline file. Will now exit the loop and proceed with configuration."
              break;
            fi
            sleep ${progress}s
            progress=$[ progress * factor ]
		  done
          chmod go-rwx /root/.ssh/authorized_keys
          ;;
     vmware)
          vmtoolsd --cmd 'machine.id.get' > /var/cache/cloud/cmdline
          ;;
     virtualpc|hyperv)
          # Hyper-V is recognized as virtualpc hypervisor type. Boot args are passed using KVP Daemon
          #waiting for the hv_kvp_daemon to start up
          #sleep  need to fix the race condition of hv_kvp_daemon and cloud-early-config
          sleep 5
          cp -f /var/opt/hyperv/.kvp_pool_0 /var/cache/cloud/cmdline
          cat /dev/null > /var/opt/hyperv/.kvp_pool_0
          ;;
     virtualbox)
          # Virtualbox is used to test the virtual router
          # get the commandline from a dmistring  (yes, hacky!)
          dmidecode | grep cmdline | sed 's/^.*cmdline://' > /var/cache/cloud/cmdline
          RV=$?
          if [ $RV -ne 0 ] ; then
            log_it "Failed to get cmdline from a virtualbox dmi property"
          fi
          ;;
  esac

}

patch() {
  local PATCH_MOUNT=/media/cdrom
  local patchfile=$PATCH_MOUNT/cloud-scripts.tgz
  local md5file=/var/cache/cloud/cloud-scripts-signature
  local privkey=$PATCH_MOUNT/authorized_keys
  local shouldpatch=false
  local cdrom_dev=
  mkdir -p $PATCH_MOUNT

  if [ -e /dev/xvdd ]; then
       cdrom_dev=/dev/xvdd
  elif [ -e /dev/cdrom ]; then
       cdrom_dev=/dev/cdrom
  elif [ -e /dev/cdrom1 ]; then
       cdrom_dev=/dev/cdrom1
  elif [ -e /dev/cdrom2 ]; then
       cdrom_dev=/dev/cdrom2
  elif [ -e /dev/cdrom3 ]; then
       cdrom_dev=/dev/cdrom3
  fi
  [ -f /var/cache/cloud/authorized_keys ] && privkey=/var/cache/cloud/authorized_keys

  if [ -n "$cdrom_dev" ]; then
    mount -o ro $cdrom_dev $PATCH_MOUNT
    [ -f $privkey ] && cp -f $privkey /root/.ssh/ && chmod go-rwx /root/.ssh/authorized_keys
    local oldmd5=
    [ -f ${md5file} ] && oldmd5=$(cat ${md5file})
    local newmd5=
    [ -f ${patchfile} ] && newmd5=$(md5sum ${patchfile} | awk '{print $1}')

   if [ "$oldmd5" != "$newmd5" ] && [ -f ${patchfile} ] && [ "$newmd5" != "" ]
    then
      shouldpatch=true
      log_it "Patching scripts oldmd5=$oldmd5 newmd5=$newmd5"
      tar xzf $patchfile -C /
      echo ${newmd5} > ${md5file}
    else
      log_it "Scripts up to date oldmd5=$oldmd5 newmd5=$newmd5"
    fi
    log_it "Patching cloud service"
    hyperVisor=$(hypervisor)
    /opt/cloud/bin/patchsystemvm.sh $PATCH_MOUNT $hyperVisor
    log_it "Unmounting %PATCH_MOUNT"
    umount $PATCH_MOUNT

    # Historical reboot removed due to cloud-early-init now running before services started

  fi

  if [ -f /mnt/cmdline ]; then
    cat /mnt/cmdline > /var/cache/cloud/cmdline
  fi
  return 0
}

start() {

  local hyp=$(hypervisor)
  [ $? -ne 0 ] && log_it "Failed to detect hypervisor type, bailing out of cloud-early-init" && exit 10
  log_it "Detected that we are running inside $hyp guest."
  get_boot_params
  patch
  if [ "$hyp" == "hyperv" ]; then
    # eject the systemvm.iso
     eject
  fi
  return 0
}

case "$1" in
start)
	log_action_begin_msg "Executing cloud-early-init."
  log_it "Executing cloud-early-init."
	if start; then
	    log_action_end_msg $?
	else
	    log_action_end_msg $?
	fi
	;;

stop)
	log_action_begin_msg "Stopping cloud-early-init."
  log_it "Stopping cloud-early-init."
	log_action_end_msg 0
	;;

*)
	echo "Usage: /etc/init.d/cloud-early-init {start|stop}."
	exit 1
	;;
esac

# Serialize cloud-early-init and cloud-early-config
log_it "Calling cloud-early-config."
/etc/init.d/cloud-early-config start

exit 0
