#cloud-config
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

---
users:
  - name: cloud
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      {{ k8s.ssh.pub.key }}

write_files:

  # Control plane specific
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""

  - path: /etc/kubernetes/pki/cloudstack/apiserver.crt
    permissions: '0644'
    content: |
      {{ k8s_control_node.apiserver.crt }}

  - path: /etc/kubernetes/pki/cloudstack/apiserver.key
    permissions: '0600'
    content: |
      {{ k8s_control_node.apiserver.key }}

  - path: /etc/kubernetes/pki/cloudstack/ca.crt
    permissions: '0644'
    content: |
      {{ k8s_control_node.ca.crt }}

  # Kubeadm extra args
  - path: /opt/cks/cluster_token
    permissions: '0644'
    content: |
      {{ k8s_control_node.cluster.token }}

  - path: /opt/cks/cluster_init_args
    permissions: '0644'
    content: |
      {{ k8s_control_node.cluster.initargs }}

  - path: /opt/cks/cluster_join_ip
    permissions: '0644'
    content: |
      {{ k8s_control_node.join_ip }}

  - path: /opt/cks/cluster_ha_cert_key
    permissions: '0644'
    content: |
      {{ k8s_control_node.cluster.ha.certificate.key }}

  # Custom registry
  - path: /opt/cks/registry_url
    permissions: '0644'
    content: |
      {{ k8s.registry.url }}

  - path: /opt/cks/registry_url_endpoint
    permissions: '0644'
    content: |
      {{ k8s.registry.url.endpoint }}

  - path: /opt/cks/registry_username
    permissions: '0644'
    content: |
      {{ k8s.registry.username }}

  - path: /opt/cks/registry_password
    permissions: '0644'
    content: |
      {{ k8s.registry.password }}

  - path: /opt/cks/registry_token
    permissions: '0644'
    content: |
      {{ k8s.registry.token }}

  # Misc settings
  - path: /opt/cks/node_type
    permissions: '0644'
    content: |
      {{ k8s.node.type }}

  - path: /opt/cks/eject_iso
    permissions: '0644'
    content: |
      {{ k8s.eject.iso }}

  # To get things started
  - path: /opt/bin/mount_cks_iso
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash -e

      ISO_MOUNT_DIR=/mnt/k8sdisk
      BINARIES_DIR=${ISO_MOUNT_DIR}/
      MOUNT_ATTEMPT_SLEEP=15
      MOUNT_ATTEMPTS=1
      while true; do
        set +e
        output=`blkid -o device -t TYPE=iso9660`
        set -e
        if [ "$output" != "" ]; then
          while read -r line; do
            if [ ! -d "${ISO_MOUNT_DIR}" ]; then
              mkdir "${ISO_MOUNT_DIR}"
            fi
            retval=0
            set +e
            mount -o ro "${line}" "${ISO_MOUNT_DIR}"
            retval=$?
            set -e
            if [ $retval -eq 0 ]; then
              if [ -d "$BINARIES_DIR" ]; then
                break
              else
                umount "${line}" && rmdir "${ISO_MOUNT_DIR}"
              fi
            fi
          done <<< "$output"
        fi
        if [ -d "$BINARIES_DIR" ]; then
          break
        fi
        echo "Waiting for Binaries directory $BINARIES_DIR to be available, sleeping for $MOUNT_ATTEMPT_SLEEP seconds, attempt: $MOUNT_ATTEMPTS"
        sleep $MOUNT_ATTEMPT_SLEEP
        MOUNT_ATTEMPTS=$[$MOUNT_ATTEMPTS + 1]
      done
      echo "Done mounting iso"

      set +e
      cp $ISO_MOUNT_DIR/scripts/* /opt/bin/
      echo "Done copying scripts"

  # Service files
  - path: /etc/systemd/system/deploy-kube-system.service
    permissions: '0755'
    owner: root:root
    content: |
      [Unit]
      Requires=containerd.service
      After=containerd.service

      [Service]
      Type=simple
      StartLimitInterval=0
      Restart=on-failure
      ExecStart=/opt/bin/deploy-kube-system

runcmd:
  - chown -R cloud:cloud /home/cloud/.ssh
  - until [ -f /opt/bin/mount_cks_iso ]; do sleep 5; done
  - /opt/bin/mount_cks_iso
  - containerd config default > /etc/containerd/config.toml
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
  - until [ -f /opt/bin/setup-kube-system ]; do sleep 5; done
  - until [ -f /opt/bin/deploy-kube-system ]; do sleep 5; done
  - /opt/bin/setup-kube-system
  - systemctl start deploy-kube-system
