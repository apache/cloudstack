<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <!--
    OSS deployment component configuration
  -->
  <bean id="databaseUpgradeChecker" class="com.cloud.upgrade.DatabaseUpgradeChecker"/>
  <bean id="configurationDaoImpl" class="org.apache.cloudstack.framework.config.dao.ConfigurationDaoImpl"/>

  <bean id="SimulatorDiscoverer" class="com.cloud.resource.SimulatorDiscoverer">
    <property name="name" value="Simulator Agent"/>
  </bean>
  <bean id="SimulatorSecondaryDiscoverer" class="com.cloud.resource.SimulatorSecondaryDiscoverer">
  </bean>
  <bean id="SimulatorGuru" class="com.cloud.simulator.SimulatorGuru">
    <property name="name" value="Simulator Guru"/>
  </bean>
  <bean id="mockConfigurationDaoImpl" class="com.cloud.simulator.dao.MockConfigurationDaoImpl" />
  <bean id="mockHostDaoImpl" class="com.cloud.simulator.dao.MockHostDaoImpl" />
  <bean id="mockSecStorageDaoImpl" class="com.cloud.simulator.dao.MockSecStorageDaoImpl" />
  <bean id="mockSecurityRulesDaoImpl" class="com.cloud.simulator.dao.MockSecurityRulesDaoImpl" />
  <bean id="mockStoragePoolDaoImpl" class="com.cloud.simulator.dao.MockStoragePoolDaoImpl" />
  <bean id="mockVMDaoImpl" class="com.cloud.simulator.dao.MockVMDaoImpl" />
  <bean id="mockVolumeDaoImpl" class="com.cloud.simulator.dao.MockVolumeDaoImpl" />
  <bean id="simulatorManagerImpl" class="com.cloud.agent.manager.SimulatorManagerImpl" />
  <bean id="mockStorageManagerImpl" class="com.cloud.agent.manager.MockStorageManagerImpl" />
  <bean id="mockVmManagerImpl" class="com.cloud.agent.manager.MockVmManagerImpl" />
  <bean id="mockNetworkManagerImpl" class="com.cloud.agent.manager.MockNetworkManagerImpl" />
  <bean id="mockAgentManagerImpl" class="com.cloud.agent.manager.MockAgentManagerImpl" />

  <bean id="SimulatorImageStoreProviderImpl"
        class="org.apache.cloudstack.storage.datastore.provider.SimulatorImageStoreProviderImpl"/>

  <!--Storage Providers-->
  <!--<bean id="dataStoreProviderManagerChild" parent="dataStoreProviderManager">-->
  <bean id="dataStoreProviderManager"
        class="org.apache.cloudstack.storage.datastore.provider.DataStoreProviderManagerImpl">
    <property name="providers">
      <!--Override the cloudstack default image store provider to use simulator defined provider-->
      <list>
        <!--Data Store Providers-->
        <ref bean="cloudStackPrimaryDataStoreProviderImpl"/>
        <ref bean="SimulatorImageStoreProviderImpl"/>
      </list>
    </property>
  </bean>

  <!--
    Managers & pluggable adapters configuration under OSS deployment
  -->
  <bean id="userAuthenticators" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="SHA256SaltedUserAuthenticator"/>
        <ref bean="MD5UserAuthenticator"/>
        <ref bean="LdapAuthenticator"/>
        <ref bean="PlainTextUserAuthenticator"/>
      </list>
    </property>
  </bean>
  <bean id="userPasswordEncoders" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="SHA256SaltedUserAuthenticator"/>
        <ref bean="MD5UserAuthenticator"/>
        <ref bean="LdapAuthenticator"/>
        <ref bean="PlainTextUserAuthenticator"/>
      </list>
    </property>
  </bean>


  <bean id="securityCheckers" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="roleBasedEntityAccessChecker"/>
	    <ref bean="affinityGroupAccessChecker"/>
        <ref bean="domainChecker"/>
      </list>
    </property>
  </bean>

  <!-- Resource discoverers -->
  <bean id="resourceDiscoverers" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="SimulatorDiscoverer"/>
        <ref bean="SimulatorSecondaryDiscoverer"/>
        <ref bean="XcpServerDiscoverer"/>
        <ref bean="SecondaryStorageDiscoverer"/>
        <ref bean="KvmServerDiscoverer"/>
        <ref bean="LxcServerDiscoverer"/>
        <ref bean="OvmDiscoverer"/>
      </list>
    </property>
  </bean>

  <!-- HA adapters -->
  <bean id="haInvestigators" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="CheckOnAgentInvestigator"/>
        <ref bean="XenServerInvestigator"/>
        <ref bean="UserVmDomRInvestigator"/>
        <ref bean="ManagementIPSystemVMInvestigator"/>
      </list>
    </property>
  </bean>

  <bean id="haFenceBuilders" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="XenServerFencer"/>
        <ref bean="KVMFencer"/>
        <ref bean="OvmFencer"/>
      </list>
    </property>
  </bean>

  <!-- Deployment/allocation adapters -->
  <bean id="deploymentPlanners" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="FirstFitPlanner"/>
        <ref bean="UserDispersingPlanner"/>
        <ref bean="UserConcentratedPodPlanner"/>
      </list>
    </property>
  </bean>

  <bean id="podAllocators" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="UserConcentratedAllocator"/>
      </list>
    </property>
  </bean>

  <bean id="hostAllocators" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="FirstFitRouting"/>
      </list>
    </property>
  </bean>

  <bean id="storagePoolAllocators" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="LocalStoragePoolAllocator"/>
        <ref bean="clusterScopeStoragePoolAllocator"/>
        <ref bean="zoneWideStoragePoolAllocator"/>
        <ref bean="garbageCollectingStoragePoolAllocator"/>
      </list>
    </property>
  </bean>

  <!-- Networking adapters -->
  <bean id="ipDeployers" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="elasticLoadBalancerElement"/>
        <ref bean="VirtualRouter"/>
        <ref bean="VpcVirtualRouter"/>
      </list>
    </property>
  </bean>

  <bean id="dhcpProviders" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="VirtualRouter"/>
        <ref bean="VpcVirtualRouter"/>
      </list>
    </property>
  </bean>

  <bean id="networkGurus" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="StorageNetworkGuru"/>
        <ref bean="ExternalGuestNetworkGuru"/>
        <ref bean="PublicNetworkGuru"/>
        <ref bean="PodBasedNetworkGuru"/>
        <ref bean="DirectPodBasedNetworkGuru"/>
        <ref bean="ControlNetworkGuru"/>
        <ref bean="DirectNetworkGuru"/>
        <ref bean="OvsGuestNetworkGuru"/>
        <ref bean="PrivateNetworkGuru"/>
      </list>
    </property>
  </bean>

  <bean id="networkElements" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
        <ref bean="VirtualRouter"/>
        <ref bean="Ovs"/>
        <ref bean="SecurityGroupProvider"/>
        <ref bean="VpcVirtualRouter"/>
        <ref bean="InternalLbVm"/>
      </list>
    </property>
  </bean>

  <!--
    UCS support components
  -->
  <bean id="ucsBladeDaoImpl" class="com.cloud.ucs.database.UcsBladeDaoImpl"/>
  <bean id="ucsManagerDaoImpl" class="com.cloud.ucs.database.UcsManagerDaoImpl"/>

  <bean id="GlobalLoadBalancingRulesServiceImpl"
        class="org.apache.cloudstack.region.gslb.GlobalLoadBalancingRulesServiceImpl"/>

  <!--
   AffinityGroup Processors
  -->
  <bean id="HostAntiAffinityProcessor" class="org.apache.cloudstack.affinity.HostAntiAffinityProcessor">
    <property name="name" value="HostAntiAffinityProcessor"/>
    <property name="type" value="host anti-affinity"/>
  </bean>

  <bean id="affinityProcessors" class="com.cloud.utils.component.AdapterList">
    <property name="Adapters">
      <list>
          <ref bean="HostAntiAffinityProcessor" />
      </list>
    </property>
  </bean>

  <bean id="DedicatedResourceManagerImpl" class="org.apache.cloudstack.dedicated.DedicatedResourceManagerImpl"/>
  <bean id="ExplicitDedicationProcessor" class="org.apache.cloudstack.affinity.ExplicitDedicationProcessor">
    <property name="name" value="ExplicitDedicationProcessor"/>
    <property name="type" value="ExplicitDedication"/>
  </bean>
  <!--
    RPC/Async/EventBus
  -->

  <bean id="onwireRegistry" class="org.apache.cloudstack.framework.serializer.OnwireClassRegistry"
    init-method="scan" >
    <property name="packages">
      <list>
        <value>org.apache.cloudstack.framework</value>
      </list>
    </property>
  </bean>
  
  <bean id="messageSerializer" class="org.apache.cloudstack.framework.serializer.JsonMessageSerializer">
    <property name="onwireClassRegistry" ref="onwireRegistry" />
  </bean>

  <bean id="transportProvider" class="org.apache.cloudstack.framework.server.ServerTransportProvider"  init-method="initialize">
    <property name="workerPoolSize" value="5" />
    <property name="nodeId" value="Node1" />
    <property name="messageSerializer" ref="messageSerializer" />
  </bean>
  
  <bean id="rpcProvider" class="org.apache.cloudstack.framework.rpc.RpcProviderImpl" init-method="initialize">
    <constructor-arg ref="transportProvider" />
    <property name="messageSerializer" ref="messageSerializer" />
  </bean>

  <bean id="messageBus" class = "org.apache.cloudstack.framework.messagebus.MessageBusBase" />
  <bean id="configDepot" class = "org.apache.cloudstack.framework.config.ConfigDepotImpl" />
</beans>
