#!/bin/bash -e

if [[ -f "/home/cloud/success" ]]; then
echo "Already provisioned!"
exit 0
fi

ISO_MOUNT_DIR=/mnt/k8sdisk
BINARIES_DIR=${ISO_MOUNT_DIR}/
K8S_CONFIG_SCRIPTS_COPY_DIR=/tmp/k8sconfigscripts/
ATTEMPT_ONLINE_INSTALL=false
setup_complete=false

OFFLINE_INSTALL_ATTEMPT_SLEEP=15
MAX_OFFLINE_INSTALL_ATTEMPTS=100
offline_attempts=1
MAX_SETUP_CRUCIAL_CMD_ATTEMPTS=3
EJECT_ISO_FROM_OS=`cat /opt/cks/eject_iso`
crucial_cmd_attempts=1
iso_drive_path=`blkid -o device -t TYPE=iso9660`

if [[ "$PATH" != *:/opt/bin && "$PATH" != *:/opt/bin:* ]]; then
  export PATH=$PATH:/opt/bin
fi

if [ -d "$BINARIES_DIR" ]; then
  ### Binaries available offline ###
  echo "Installing binaries from ${BINARIES_DIR}"
  mkdir -p /opt/cni/bin
  tar -f "${BINARIES_DIR}/cni/cni-plugins-"*64.tgz -C /opt/cni/bin -xz

  mkdir -p /opt/bin
  tar -f "${BINARIES_DIR}/cri-tools/crictl-linux-"*64.tar.gz -C /opt/bin -xz

  mkdir -p /opt/bin
  cd /opt/bin
  cp -a ${BINARIES_DIR}/k8s/{kubeadm,kubelet,kubectl} .
  chmod +x {kubeadm,kubelet,kubectl}

  sed "s:/usr/bin:/opt/bin:g" ${BINARIES_DIR}/kubelet.service > /etc/systemd/system/kubelet.service
  mkdir -p /etc/systemd/system/kubelet.service.d
  sed "s:/usr/bin:/opt/bin:g" ${BINARIES_DIR}/10-kubeadm.conf > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

  echo "KUBELET_EXTRA_ARGS=--cgroup-driver=systemd" > /etc/default/kubelet

  output=`ls ${BINARIES_DIR}/docker/`
  if [ "$output" != "" ]; then
    while read -r line; do
      crucial_cmd_attempts=1
      while true; do
        if (( "$crucial_cmd_attempts" > "$MAX_SETUP_CRUCIAL_CMD_ATTEMPTS" )); then
          echo "Loading docker image ${BINARIES_DIR}/docker/$line failed!"
          break;
        fi
        retval=0
        set +e
        ctr -n k8s.io image import "${BINARIES_DIR}/docker/$line"
        retval=$?
        set -e
        if [ $retval -eq 0 ]; then
          break;
        fi
        crucial_cmd_attempts=$[$crucial_cmd_attempts + 1]
      done
    done <<< "$output"
    setup_complete=true
  fi

  mkdir -p "${K8S_CONFIG_SCRIPTS_COPY_DIR}"
  cp ${BINARIES_DIR}/*.yaml "${K8S_CONFIG_SCRIPTS_COPY_DIR}"
  if [ -e "${BINARIES_DIR}/autoscaler.yaml" ]; then
    mkdir -p /opt/autoscaler
    cp "${BINARIES_DIR}/autoscaler.yaml" /opt/autoscaler/autoscaler_tmpl.yaml
  fi
  if [ -e "${BINARIES_DIR}/provider.yaml" ]; then
    mkdir -p /opt/provider
    cp "${BINARIES_DIR}/provider.yaml" /opt/provider/provider.yaml
  fi
  umount "${ISO_MOUNT_DIR}" && rmdir "${ISO_MOUNT_DIR}"
  if [ "$EJECT_ISO_FROM_OS" = true ] && [ "$iso_drive_path" != "" ]; then
    eject "${iso_drive_path}"
  fi
fi

PAUSE_IMAGE=`ctr -n k8s.io images ls -q | grep "pause" | sort | tail -n 1`
echo $PAUSE_IMAGE
if [ -n "$PAUSE_IMAGE" ]; then
  sed -i "s|sandbox_image = .*|sandbox_image = \"$PAUSE_IMAGE\"|g" /etc/containerd/config.toml
fi

systemctl enable kubelet && systemctl start kubelet
modprobe overlay && modprobe br_netfilter && sysctl net.bridge.bridge-nf-call-iptables=1
