// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.baremetal.networkservice;

import com.cloud.utils.exception.CloudRuntimeException;
import com.cloud.utils.xmlobject.XmlObject;
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.web.client.ResponseErrorHandler;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by tryggvil on 9/5/16.
 * Tested on Dell Application Software Version:  9.9(0.0P9)
 */
public class DellS4810BaremetalSwitchBackend implements BaremetalSwitchBackend {
    private Logger logger = Logger.getLogger(DellS4810BaremetalSwitchBackend.class);
    public static final String TYPE = "DellS4810";

    private static List<HttpStatus> successHttpStatusCode = new ArrayList<>();
    {
        successHttpStatusCode.add(HttpStatus.OK);
        successHttpStatusCode.add(HttpStatus.ACCEPTED);
        successHttpStatusCode.add(HttpStatus.CREATED);
        successHttpStatusCode.add(HttpStatus.NO_CONTENT);
        successHttpStatusCode.add(HttpStatus.PARTIAL_CONTENT);
        successHttpStatusCode.add(HttpStatus.RESET_CONTENT);
        successHttpStatusCode.add(HttpStatus.ALREADY_REPORTED);
    }

    RestTemplate rest = new RestTemplate();
    {
        // fake error handler, we handle error in business logic code
        rest.setErrorHandler(new ResponseErrorHandler() {
            @Override
            public boolean hasError(ClientHttpResponse clientHttpResponse) throws IOException {
                return false;
            }

            @Override
            public void handleError(ClientHttpResponse clientHttpResponse) throws IOException {
            }
        });
    }

    private String buildLink(String switchIp, String path) {
        UriComponentsBuilder builder = UriComponentsBuilder.newInstance();
        builder.scheme("http");
        builder.host(switchIp);
        builder.port(8008);
        builder.path(path);
        return builder.build().toUriString();
    }

    @Override
    public String getSwitchBackendType() {
        return TYPE;
    }

    @Override
    public void prepareVlan(BaremetalVlanStruct struct) {
        String link = buildLink(struct.getSwitchIp(), String.format("/api/running/dell/interfaces/interface/vlan-%s", struct.getVlan()));
        HttpHeaders headers = createBasicAuthenticationHeader(struct);
        HttpEntity<String> request = new HttpEntity<>(headers);
        ResponseEntity rsp = rest.exchange(link, HttpMethod.GET, request, String.class);
        logger.debug(String.format("http get: %s", link));
        boolean addUntaggedPort = successHttpStatusCode.contains(rsp.getStatusCode());
        if (rsp.getStatusCode() == HttpStatus.NOT_FOUND) {
            XmlObject xml = new XmlObject("interface");
            String vlanName = String.format("vlan-%s", struct.getVlan());
            XmlObject name = new XmlObject("name");
            name.setText(vlanName);
            xml.putElement("name",name);
            XmlObject shutdown = new XmlObject("shutdown");
            shutdown.setText("false");
            xml.putElement("shutdown",shutdown);
            request = new HttpEntity<>(xml.dump(), headers);
            link = buildLink(struct.getSwitchIp(), String.format("/api/running/dell/interfaces/interface/vlan-%s", struct.getVlan()));
            logger.debug(String.format("http get: %s, body: %s", link, request));
            rsp = rest.exchange(link, HttpMethod.PUT, request, String.class);
            if (!successHttpStatusCode.contains(rsp.getStatusCode())) {
                throw new CloudRuntimeException(String.format("unable to create vlan[%s] on force10 switch[ip:%s]. HTTP status code:%s, body dump:%s",
                        struct.getVlan(), struct.getSwitchIp(),rsp.getStatusCode(), rsp.getBody()));
            } else {
                logger.debug(String.format("successfully programmed vlan[%s] on DellS4810[ip:%s, port:%s]. http response[status code:%s, body:%s]",
                        struct.getVlan(), struct.getSwitchIp(), struct.getPort(), rsp.getStatusCode(), rsp.getBody()));
            }
            addUntaggedPort = true;
        }
        if (addUntaggedPort){
            XmlObject newuntaggedport = new XmlObject("untagged");
            XmlObject newname = new XmlObject("name");
            newname.setText(struct.getPort());
            newuntaggedport.putElement("name", newname);
            request = new HttpEntity<>(newuntaggedport.dump(), headers);
            link = buildLink(struct.getSwitchIp(), String.format("/api/running/dell/interfaces/interface/vlan-%s/untagged/%s", struct.getVlan(), struct.getPort()));
            logger.debug(String.format("http get: %s, body: %s", link, request));
            rsp = rest.exchange(link, HttpMethod.PUT, request, String.class);
            if (!successHttpStatusCode.contains(rsp.getStatusCode())) {
                throw new CloudRuntimeException(String.format("failed to program vlan[%s] for port[%s] on force10[ip:%s]. http status:%s, body dump:%s",
                        struct.getVlan(), struct.getPort(), struct.getSwitchIp(), rsp.getStatusCode(), rsp.getBody()));
            } else {
                logger.debug(String.format("successfully join port[%s] into vlan[%s] on DellS4810[ip:%s]. http response[status code:%s, body:%s]",
                        struct.getPort(), struct.getVlan(), struct.getSwitchIp(), rsp.getStatusCode(), rsp.getBody()));
            }
        } else {
            throw new CloudRuntimeException(String.format("force10[ip:%s] returns unexpected error[%s] when http getting %s, body dump:%s",
                    struct.getSwitchIp(), rsp.getStatusCode(), link, rsp.getBody()));
        }
    }

    @Override
    public void removePortFromVlan(BaremetalVlanStruct struct) {
        String link = buildLink(struct.getSwitchIp(), String.format("/api/running/dell/interfaces/interface/vlan-%s/untagged/%s", struct.getVlan(), struct.getPort()));
        HttpHeaders headers = createBasicAuthenticationHeader(struct);
        HttpEntity<String> request = new HttpEntity<>(headers);
        logger.debug(String.format("http get: %s, body: %s", link, request));
        ResponseEntity rsp = rest.exchange(link, HttpMethod.DELETE, request, String.class);
        if (successHttpStatusCode.contains(rsp.getStatusCode())) {
            logger.debug(String.format("vlan[%s] has been deleted on force10[ip:%s], no need to remove the port[%s] anymore", struct.getVlan(), struct.getSwitchIp(), struct.getPort()));
        } else {
            throw new CloudRuntimeException(String.format("force10[ip:%s] returns unexpected error[%s] when http getting %s, body dump:%s",
                    struct.getSwitchIp(), rsp.getStatusCode(), link, rsp.getBody()));
        }
    }

    private HttpHeaders createBasicAuthenticationHeader(BaremetalVlanStruct struct) {
        String plainCreds = String.format("%s:%s", struct.getSwitchUsername(), struct.getSwitchPassword());
        byte[] plainCredsBytes = plainCreds.getBytes();
        byte[] base64CredsBytes = Base64.encodeBase64(plainCredsBytes);
        String base64Creds = new String(base64CredsBytes);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Basic " + base64Creds);
        headers.setAccept(Arrays.asList(MediaType.ALL));
        headers.setContentType(MediaType.valueOf("application/vnd.yang.data+xml"));
        return  headers;
    }

    public static void main(String[] args) {
        try{
            String switchType = "DellS4810";
            String switchip = args[0];
            String switchUsername = args[1];
            String switchPassword = args[2];
            String action = args[3];
            String svlan = args[4];
            int vlan = Integer.parseInt(svlan);
            String port = args[5];
            BaremetalVlanStruct struct = new BaremetalVlanStruct();
            DellS4810BaremetalSwitchBackend backend = new DellS4810BaremetalSwitchBackend();
            struct.setSwitchType(switchType);
            struct.setSwitchIp(switchip);
            struct.setSwitchPassword(switchPassword);
            struct.setSwitchUsername(switchUsername);
            struct.setPort(port);
            struct.setVlan(vlan);
            if ( action.equals("remove") ){
                backend.removePortFromVlan(struct);
            } else if ( action.equals("add") ){
                backend.prepareVlan(struct);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
